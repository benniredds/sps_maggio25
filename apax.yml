# General information
name: "sps_maggio25"
version: 0.0.1
type: app
# Description for your application example or app
description: <Description for your application example or app>
# Targets to be compiled with 'apax build'
targets:
  - "1500"
  - llvm
# Dependencies
devDependencies:
  "@ax/sdk": ^2504.0.0
  "@ax/certificate-management": ^1.2.0

dependencies:
  "@ax/simatic-1500-tasks": ^10.0.1
  "@ax/simatic-1500-clocks": ^10.0.6
  "@ax/system": ^10.0.24

# Project variables
variables:
  AX_ACCEPT_SECURITY_DISCLAIMER: "true"
  APAX_BUILD_ARGS:
    - --debug # Enable debug information for value debugging
  # Folder where to find the compiled HW artifacts
  HW_BIN_FOLDER: ./hwbin
  # Folder where to find the compiled SW artifacts
  SW_BIN_FOLDER: "./bin/1500"
  # Choose your target RT, here : any S7-1500 PLC
  # IP address must match with the IP address of your target device
  # The IP address in the .vscode/launch.json must be equal  
  IP_ADDRESS: "192.168.0.1"
  # The master password, that protect the access to the hardware configuration on the plc
  # Disclaimer: 
  # Normally the password should not be in the code as a readable variable. This is only the case here as it is a simple example.
  # Please use a password that is case sensitive (1 big and 1 small letter), a special character and a number.
  MASTER_PW: "Siemens1!"
  # The locations of the certificate files
  TLS_CONNECT_CERTFILE: "certificate/reference_x509.crt"
  TLS_IMPORT_CERTFILE: "certificate/containerWithPublicAndPrivateKeys_x509.p12"
  # The password for importing the certificate. 
  # Disclaimer: 
  # A passphrase should not be in the code as a readable variable. This is only the case here as it is a simple example.
  CERT_PASSPHRASE: "Siemens1!"
  # The name of the plc in the file myPLC.hwl.yml. 
  # The name should be specified before creating the plc security file, as the files are assigned using the plc name.
  PLC_NAME: "PLC_1"
  # The default user name in the myPLC.hwl.yml file
  USER_NAME: "User1"
  # The password for the default user in the myPLC.hwl.yml file. A password should not be in the code as a readable variable. This is only the case here as it is a simple example.
  USER_PASSWORD: "Siemens1!"

# Apax scripts
scripts:
  ############### Inital runs for PLC / PLC Name changes ###########################
  # The bash function provide the easy creation of certificates via open ssl and then moves the certificate to the certificate folder. 
  # In order to call the script, the access level must be authorized at the beginning.
  create_certificate:
    - chmod +x certificate/createCertificateViaOpenSSL.sh
    - certificate/createCertificateViaOpenSSL.sh
    - echo "set in the apax.yml the variable CERT_PASSPHRASE to the value that you insert as password of import of certificate"

  # Creates the file for the security configuration for the PLC
  hwc_setup_secure_communication: hwc setup-secure-communication --module-name $PLC_NAME --input hwc --master-password:$MASTER_PW
  
  # Imports the certificate for TLS (Transport Layer Security) communication in the project to the PLC
  hwc_import_certificate: hwc import-certificate --module-name $PLC_NAME --input hwc --certificate $TLS_IMPORT_CERTFILE --passphrase $CERT_PASSPHRASE --purpose TLS
  hwc_import_certificate_opcua: hwc import-certificate --module-name $PLC_NAME --input hwc --certificate $TLS_IMPORT_CERTFILE --passphrase $CERT_PASSPHRASE --purpose OpcUaServer
  
  # Creates the default user for the PLC
  hwc_create_user: hwc manage-users --input hwc --module-name $PLC_NAME set-password --username $USER_NAME --password $USER_PASSWORD
  
  #Password for the access levels defined via
  #set_pw_level: apax hwc set-accessprotection-password --module-name <PLC_NAME> --input hwc --level NoAccess --password ""

  ##################################################################################
  # Compile the hardware description (input:sources) to target specific data (output:binaries) and update the IO- and HwIdent mapping (SystemConstants)
  hw_compile: hwc compile --input hwc --output $HW_BIN_FOLDER
  
  # load the target specific hardware data (binaries) to the PLC
  hw_first_load: hwld load --input $HW_BIN_FOLDER/$PLC_NAME -t $IP_ADDRESS --username $USER_NAME --password $USER_PASSWORD -C $TLS_CONNECT_CERTFILE -M:$MASTER_PW
  hw_load_reset: hwld load --reset-plc KeepOnlyIP -t $IP_ADDRESS --username $USER_NAME --password $USER_PASSWORD #--accept-security-disclaimer
  hw_load: hwld load --input $HW_BIN_FOLDER/$PLC_NAME -t $IP_ADDRESS --username $USER_NAME --password $USER_PASSWORD

  # Call 'apax load' to download the builded program to the target. An 'apax build' might be required upfront
  load: sld load --input $SW_BIN_FOLDER --target $IP_ADDRESS --restart --log debug -C $TLS_CONNECT_CERTFILE --username $USER_NAME --password $USER_PASSWORD --accept-security-disclaimer
  deltaload: sld load -m delta --input $SW_BIN_FOLDER --target $IP_ADDRESS --restart --log debug -C $TLS_CONNECT_CERTFILE --username $USER_NAME --password $USER_PASSWORD --accept-security-disclaimer
  # Call 'apax dlplc' to build and download the application to the target
  dlplc:
    - apax build
    - apax load

  # Compiles the hardware and software and then loads it onto the PLC
  compile_and_load_all:
    - apax hw_compile
    - apax hw_load
    - apax dlplc


#other useful commands
  hwc_install_gsdml: hwc install-gsd -i hwc
  hwc_get_supported_devices: hwc get-supported-devices
  hwc_get_supported_devices_properties: hwc get-supported-device-properties -o "6ES7 587-1AP00-0AB0" -v "V3.1" #> properties.txt
  hwc_generate_config_templates:
      - hwc generate-template-file --orderNumber "6ES7 587-1AP00-0AB0" --version "V3.1" --output "hwc\hw.templates\gen_templ_vplc.hwl.json"
      - hwc generate-template-file --gsdFileName "gsdml-v2.31-ur-ur-20160505.xml" --gsdId "DAP 1" --output "hwc\hw.templates\gen_templ_ur.hwl.json"
      - hwc generate-template-file --gsdFileName "GSDML-V2.42-#Siemens-PreConf_FlexGrasp_ConveyorFPLC-20241028-123308.xml" --gsdId "DAP1" --output "hwc\hw.templates\gen_templ_idevConvPlc.hwl.json"

#OPCUA related
  exportopcua: opcua-server-config interface export "bin/1500/sps_maggio25.app" -o "interfaces\vplc-flax-grasp-sps24-nodesetnew.xml"
  #opcuaload: opcua-server-config interface install "bin/1500/ax-sps24-pickai.app" -C $COMM_CERTIFICATE -sr -t $VPLC_IP --accept-security-disclaimer

#DIAG
  vplc-run: plc-info set-mode run --target $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  vplc-stop: plc-info set-mode stop -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  vplc-mres: plc-info memory-reset -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  info-vplc: plc-info inspect -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  perf-cylce-vplc: perf-info cycle-time -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  perf-memory-vplc: perf-info memory -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  perf-com-vplc: perf-info comm-load -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  aslog-vplc: diag-buff -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE
  hwdiag-vplc: hw-diag compare -t $IP_ADDRESS -C $TLS_CONNECT_CERTFILE

  # commissioning scripts
  get-cert: plc-cert -t IP_ADDRESS -o "certificate\certificateForConnectionNew.crt"
  reset_plc: hwld --resetPlc KeepOnlyIP --targetIP IP_ADDRESS --accept-security-disclaimer

